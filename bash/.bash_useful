# SSH'ing one.com-server majaogtorbjornsbryllup.com
ssh majaogtorbjornsbryllup.com@ssh.majaogtorbjornsbryllup.com

# ftp'ing one.com-server vitana.se
sftp vitana.se@ssh.vitana.se

# Setting up computer for git communication with one.com-server majaogtorbjornsbryllup.com
ssh-keygen -t rsa
cat ~/.ssh/id_rsa.pub | ssh majaogtorbjornsbryllup.com@ssh.majaogtorbjornsbryllup.com "cat >>  ~/.ssh/authorized_keys"

# Setting up repo for git communication with one.com-server majaogtorbjornsbryllup.com
git remote add origin ssh://majaogtorbjornsbryllup.com@ssh.majaogtorbjornsbryllup.com:/home/repos/...
git remote set-url origin ssh://majaogtorbjornsbryllup.com@ssh.majaogtorbjornsbryllup.com:~/repos/...

# Checking installed packages and sizes
aptitude -O installsize -F'%p %I' search '~i'

# Create ogg audio from a mp4 file
ffmpeg -i input.mp4 -vn -acodec libvorbis -y output.ogg

# Create webm video from a mp4 file
avconv -i in.mp4 -vcodec libvpx -crf 10 -b:v 1M -acodec libvorbis -qscale:a 5 out.webm

# Slicing movie file
avconv -i in.mp4 -vcodec copy -acodec copy -ss 00:00:00 -t 00:01:40 out.mp4

# Rotate mp4 90 deg counterclocwise by re-encoding
avconv -i in.mp4 -vf "transpose=2" -codec:v libx264 -preset slow -crf 25 -codec:a copy out.mp4

# Converting image size
convert -resize 500 in.png out.png

# Tracking development of file lines per day
git log --numstat --pretty="%H" produktrapport.tex > commitstats_produktrapport.data

# List all files #included in C code
ack --cc '#include\s+<(.*)>' --output '$1' -h

# Changing mouse modifier to super so that I can Blender with 2-button mouse
gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier "<Super>"

# Use the git alias graphviz (included myself in .gitconfig)
git graphviz <arg> | dotty /dev/stdin


# Once you have the frames, create a pallette:
ffmpeg -i frames/frame%05d.png -vf palettegen frames/palette.png
# Once you have frames and pallete, create gif:
ffmpeg -v warning -framerate 200 -i frames/frame%05d.png -i frames/palette.png -lavfi "paletteuse,setpts=6*PTS" -y out.gif
# If you want to resize the gif, try this:
ffmpeg -hide_banner -v warning -i demo.gif -filter_complex "[0:v] scale=320:-1:flags=lanczos,split [a][b]; [a] palettegen=reserve_transparent=on [p]; [b][p] paletteuse" demo_small.gif

# Concatenate some pdfs
pdftk l1.pdf l1p5.pdf l2.pdf l3.pdf l4.pdf l4p5.pdf l5.pdf cat output layout.pdf

gs -o output.pdf -sDEVICE=pdfwrite \
                 -dAntiAliasColorImage=false \
                 -dAntiAliasGrayImage=false \
                 -dAntiAliasMonoImage=false \
                 -dAutoFilterColorImages=false \
                 -dAutoFilterGrayImages=false \
                 -dDownsampleColorImages=false  \
                 -dDownsampleGrayImages=false \
                 -dDownsampleMonoImages=false \
                 -dColorConversionStrategy=/LeaveColorUnchanged \
                 -dConvertCMYKImagesToRGB=false \
                 -dConvertImagesToIndexed=false \
                 -dUCRandBGInfo=/Preserve \
                 -dPreserveHalftoneInfo=true \
                 -dPreserveOPIComments=true \
                 -dPreserveOverprintSettings=true \
                 l1.pdf l2.pdf l3.pdf l4.pdf l5.pdf l6.pdf

# Making git read hook scripts from templatedir
git config --global init.templatedir '~/.git_template'

# View file history
git log --follow -p -- <filename>

# Update git submodules to the new state that current branch points to
git submodule update --init

# Start a gdb session
gdb --args path/to/binary --gtest_break_on_failure --gtest_filter=theclass.thetest

# Clean up submodule build stuff if make clean has been unsuccessful after last build
git submodule foreach git clean -dxf

# What have we fetched that would get included if we rebase?
git hist ..origin/master

# Print the full path of a file (like thefile in this example)
readlink -f thefile

# Clean up working directory very temporarily
git stash
git stash list
git stash pop

# Lets you add one hunch at a time, reviewing yourself before adding
git gui

# Starts kdiff3 in my case. Better mergetools may exist...
git mergetool

# Apply clang-format to every change in the previous commit
git clang-format HEAD^

# When you get unexpected merge conflicts that you don't want to resolve
git checkout -f
#
# Batch convert resize
for a in ./*.jpg; do convert -resize 500 $a liten_$(basename $a); done;

# Concatenate two webms
ffmpeg -y -f concat -i mylist.txt -safe 0 -sn -acodec copy -vcodec copy out.webm

# Creating a linc core dump on Ubuntu host (not in Docker)
sudo sysctl -w kernel.core_pattern=core.%u.%p.%t
ulimit -c unlimited
cd ~/GitlabRepos/line-collision-detector/linc-gcc/linc/linc
./linc ../../../linc/linc/test-models/benchy-low-poly.binary.stl ../../../linc/linc/params-example
systemctl restart apport # to restore default apport settings afterwards

